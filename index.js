const express = require('express');
const axios = require('axios');
require('dotenv').config();

const app = express();
app.use(express.json());

const BITRIX_URL = process.env.BITRIX_URL; // –Ω–∞–ø—Ä–∏–º–µ—Ä https://yourcompany.bitrix24.ru/rest/10730/yourwebhooktoken

app.post('/', async (req, res) => {
  try {
    const { deal_id } = req.body;
    console.log(`‚ñ∂Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: ${deal_id}`);

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    const { data: dealRes } = await axios.post(`${BITRIX_URL}/crm.deal.get`, null, {
      params: { id: deal_id }
    });
    if (!dealRes.result) {
      return res.status(404).send('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    const deal = dealRes.result;

    // 2. –ö–æ–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É (—É–∫–∞–∂–∏ –Ω—É–∂–Ω—É—é —Å—Ç–∞–¥–∏—é –∏ –≤–æ—Ä–æ–Ω–∫—É)
    const { data: copyRes } = await axios.post(`${BITRIX_URL}/crm.deal.add`, null, {
      params: {
        fields: JSON.stringify({
          TITLE: deal.TITLE,
          STAGE_ID: '–†–î_–≤—ã–¥–∞–Ω',   // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –∫–æ–¥ —Å—Ç–∞–¥–∏–∏
          CATEGORY_ID: 14,        // <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π ID –≤–æ—Ä–æ–Ω–∫–∏
          ASSIGNED_BY_ID: deal.ASSIGNED_BY_ID,
          // —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Å–¥–µ–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—á–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        })
      }
    });

    const newDealId = copyRes.result;
    if (!newDealId) {
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏');
    }
    console.log(`‚úÖ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${newDealId}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–æ–π –ø–æ UF_CRM_TASK
    const { data: taskRes } = await axios.post(`${BITRIX_URL}/tasks.task.list`, null, {
      params: {
        filter: JSON.stringify({
          UF_CRM_TASK: `D_${deal_id}`,
          STATUS: [1, 2, 3, 4]  // –æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –≤ —Ä–∞–±–æ—Ç–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π
        }),
        select: JSON.stringify(['ID', 'TITLE', 'RESPONSIBLE_ID', 'DESCRIPTION', 'UF_CRM_TASK'])
      }
    });

    const tasks = taskRes.result?.tasks || [];
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);

    // 4. –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
    for (const task of tasks) {
      try {
        await axios.post(`${BITRIX_URL}/tasks.task.add`, null, {
          params: {
            fields: JSON.stringify({
              TITLE: task.TITLE,
              RESPONSIBLE_ID: task.RESPONSIBLE_ID,
              DESCRIPTION: task.DESCRIPTION || '',
              UF_CRM_TASK: [`D_${newDealId}`]
            })
          }
        });
        console.log(`–ó–∞–¥–∞—á–∞ ${task.ID} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–¥–µ–ª–∫–µ D_${newDealId}`);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ ${task.ID}:`, err.response?.data || err.message);
      }
    }

    res.status(200).send(`–°–¥–µ–ª–∫–∞ –∏ ${tasks.length} –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã.`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:', e.response?.data || e.message);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–¥–∞—á.');
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
