// bitrix_deal_task_copier.js ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ –∑–∞–¥–∞—á
// –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–¥–µ–ª–∫—É + –≤—Å–µ –∑–∞–¥–∞—á–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ) + —á–µ–∫-–ª–∏—Å—Ç—ã + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)

require('dotenv').config();
const axios = require('axios');
const winston = require('winston');

const BITRIX_URL            = process.env.BITRIX_URL;
const DEFAULT_CATEGORY_ID   = Number(process.env.TARGET_CATEGORY_ID || 14);

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [ new winston.transports.Console() ]
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ REST API
async function btrx(method, params = {}, asQuery = true) {
  const url = `${BITRIX_URL}/${method}`;
  const cfg = asQuery ? { params } : {};
  const body = asQuery ? null : params;
  const { data } = await axios.post(url, body, cfg);
  if (data.error) throw new Error(`${method}: ${data.error_description || data.error}`);
  return data.result;
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
async function btrxPaged(method, params = {}, key = 'tasks') {
  let start = 0, all = [];
  while (true) {
    const chunk = await btrx(method, { ...params, start }, true);
    all = all.concat(key ? chunk[key] || [] : chunk);
    if (!chunk.next) break;
    start = chunk.next;
  }
  return all;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
async function copyDeal(srcDealId, targetCategoryId) {
  const deal = await btrx('crm.deal.get', { id: srcDealId });
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ ${srcDealId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  const { ID, CATEGORY_ID, STAGE_ID, DATE_CREATE, UF_CRM_PAYMENT_DEADLINE, UF_CRM_SOURCE, ...fields } = deal;
  fields.CATEGORY_ID = targetCategoryId;
  const res = await btrx('crm.deal.add', { fields }, false);
  return typeof res === 'object' ? (res.result || res.id || res) : res;
}

// –ö–∞—Ä—Ç–∞ —Å—Ç–∞—Ä—ã—Ö ‚Üí –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
const taskMap = new Map();

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
async function copyTasks(srcDealId, dstDealId) {
  const tasks = await btrxPaged('tasks.task.list', {
    filter: { 'UF_CRM_TASK': `D_${srcDealId}` },
    select: ['ID','TITLE','UF_CRM_TASK','RESPONSIBLE_ID','DESCRIPTION','DEADLINE','PRIORITY','START_DATE_PLAN','END_DATE_PLAN','STATUS','CHANGED_DATE']
  }, 'tasks');

  for (const t of tasks) {
    if (!t.TITLE?.trim()) { logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É ${t.ID}: –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞`); continue; }
    const fields = { TITLE: t.TITLE, RESPONSIBLE_ID: t.RESPONSIBLE_ID, DESCRIPTION: t.DESCRIPTION||'', DEADLINE: t.DEADLINE, PRIORITY: t.PRIORITY, START_DATE_PLAN: t.START_DATE_PLAN, END_DATE_PLAN: t.END_DATE_PLAN, UF_CRM_TASK: [`D_${dstDealId}`], STATUS: t.STATUS };
    const added = await btrx('tasks.task.add', { fields: fields }, false);
    const newId = added.task?.id||added.id||added;
    taskMap.set(t.ID, { newId, status: t.STATUS, changed: t.CHANGED_DATE });
    logger.info(`üìå –ó–∞–¥–∞—á–∞ ${t.ID} ‚Üí ${newId} (—Å—Ç–∞—Ç—É—Å ${t.STATUS})`);
    await copyChecklist(t.ID, newId);
    await copyComments(t.ID, newId);
  }

  const open = [...taskMap.values()].filter(i => i.status !== 5);
  if (open.length) {
    open.sort((a,b)=>new Date(b.changed)-new Date(a.changed));
    const last = open[0];
    if (last.status===5) { await btrx('tasks.task.update',{ taskId: last.newId, fields:{STATUS:2} }); logger.info(`‚ôªÔ∏è –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–¥–∞—á–∞ ${last.newId}`); }
  } else {
    const acts = await btrxPaged('crm.activity.list',{ filter:{OWNER_TYPE_ID:2,OWNER_ID:srcDealId},order:{DEADLINE:'DESC'}},'activities');
    if (acts.length) {
      const a=acts[0];
      const fields={ TITLE:`Follow-up: ${a.SUBJECT}`, RESPONSIBLE_ID:a.RESPONSIBLE_ID, START_DATE_PLAN:a.START_TIME, DEADLINE:a.END_TIME, UF_CRM_TASK:[`D_${dstDealId}`], STATUS:2 };
      const add=await btrx('tasks.task.add',{ fields },false); const id=add.task?.id||add.id||add;
      logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${id}`);
    }
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞
async function copyChecklist(oldId,newId){ const items=await btrx('task.checklistitem.getList',{taskId:oldId}); for(const it of items) await btrx('task.checklistitem.add',{taskId:newId,fields:{TITLE:it.TITLE,IS_COMPLETE:it.IS_COMPLETE}},false); }
// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
async function copyComments(oldId,newId){ const com=await btrx('task.commentitem.getList',{taskId:oldId}); for(const c of com) if(c.POST_MESSAGE?.trim()) await btrx('task.commentitem.add',{taskId:newId,fields:{POST_MESSAGE:c.POST_MESSAGE}},false); }

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
async function copyActivities(srcDealId,dstDealId){ logger.info(`‚ñ∂Ô∏è –ö–æ–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ ${srcDealId}‚Üí${dstDealId}`);
  const acts=await btrxPaged('crm.activity.list',{ filter:{OWNER_TYPE_ID:2,OWNER_ID:srcDealId} },'activities');
  for(const act of acts){
    try{ await btrx('crm.activity.add',{ fields:{ SUBJECT:act.SUBJECT,TYPE_ID:act.TYPE_ID,DIRECTION:act.DIRECTION,START_TIME:act.START_TIME,END_TIME:act.END_TIME,RESPONSIBLE_ID:act.RESPONSIBLE_ID,DESCRIPTION:act.DESCRIPTION,COMMUNICATIONS:act.COMMUNICATIONS||[],OWNER_ID:dstDealId,OWNER_TYPE_ID:2 } },false);
      logger.info(`   ‚Ä¢ –î–µ–ª–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${act.SUBJECT}`);
    }catch(e){logger.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${e.message}`);} }
}

// –û—Å–Ω–æ–≤–Ω–∞—è
(async()=>{
  logger.info(`üîç –ò—â–µ–º —Å–¥–µ–ª–∫—É –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ 70...`);
  const deals=await btrx('crm.deal.list',{ order:{ID:'DESC'},filter:{CATEGORY_ID:70},select:['ID','TITLE'],limit:1 });
  const src=deals[0]?.ID; if(!src){logger.error('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');return;}
  logger.info(`üìé –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ ${src}`);

  // –í—Å–µ–≥–¥–∞ –∫–æ–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
  const newId=await copyDeal(src,DEFAULT_CATEGORY_ID);
  logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${newId}`);
  await copyTasks(src,newId);
  await copyActivities(src,newId);
  logger.info(`üéâ –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω`);
})();
