// index.js ‚Äî API –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –≤ Bitrix24 –ø–æ GET /copy
require('dotenv').config();
const axios = require('axios');
const winston = require('winston');
const express = require('express');
const app = express();

const BITRIX_URL          = process.env.BITRIX_URL;
const DEFAULT_CATEGORY_ID = Number(process.env.TARGET_CATEGORY_ID || 14);

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [ new winston.transports.Console() ]
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ Bitrix REST API
async function btrx(method, params = {}, asQuery = true) {
  const url = `${BITRIX_URL}/${method}`;
  const cfg = asQuery ? { params } : {};
  const body = asQuery ? null : params;
  const { data } = await axios.post(url, body, cfg);
  if (data.error) throw new Error(`${method}: ${data.error_description || data.error}`);
  return data.result;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
async function copyDeal(srcId, catId) {
  const deal = await btrx('crm.deal.get', { id: srcId });
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ ${srcId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  const { ID, CATEGORY_ID, STAGE_ID, DATE_CREATE, ...fields } = deal;
  fields.CATEGORY_ID = catId;
  const res = await btrx('crm.deal.add', { fields }, false);
  return (typeof res === 'object' ? (res.result || res.id) : res);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–∏
async function mainCopy() {
  logger.info(`üîç –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–¥–µ–ª–∫—É –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ 70...`);
  const deals = await btrx('crm.deal.list', {
    order:  { ID: 'DESC' },
    filter: { CATEGORY_ID: 70 },
    select: ['ID','TITLE'],
    limit:  1
  });
  const srcId = deals[0]?.ID;
  if (!srcId) { logger.error('‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'); throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫'); }
  logger.info(`üìé –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ ${srcId}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ø–∏—é –≤ —Ü–µ–ª–µ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–µ
  const exists = await btrx('crm.deal.list', {
    filter:   { CATEGORY_ID: DEFAULT_CATEGORY_ID, TITLE: deals[0].TITLE },
    select:   ['ID'],
    limit:    1
  });
  if (exists.length) {
    logger.warn(`‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ (ID ${exists[0].ID})`);
    return { status: 'already_exists', deal_id: exists[0].ID };
  }

  const newId = await copyDeal(srcId, DEFAULT_CATEGORY_ID);
  logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${newId}`);
  return { status: 'copied', deal_id: newId };
}

// API endpoint: GET /copy
app.get('/copy', async (req, res) => {
  try {
    const result = await mainCopy();
    res.json(result);
  } catch (err) {
    logger.error(err.stack || err.message);
    res.status(500).json({ error: err.message });
  }
});

// Render —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–ª –ø–æ—Ä—Ç!
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => logger.info(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
