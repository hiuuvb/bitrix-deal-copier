// Bitrix Deal & Task Copier ‚Äì standalone utility
// ------------------------------------------------------
// –ö–æ–ø–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫—É –≤ –Ω–æ–≤—É—é –≤–æ—Ä–æ–Ω–∫—É –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –µ—ë –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏.
// –ó–∞–ø—É—Å–∫:
//   node bitrix_deal_task_copier.js <SOURCE_DEAL_ID> <TARGET_CATEGORY_ID>
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ .env:
//   BITRIX_URL           ‚Äì https://your-domain.bitrix24.ru/rest/1/xxx
//   TARGET_CATEGORY_ID   ‚Äì ID –≤–æ—Ä–æ–Ω–∫–∏ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω CLI)

require('dotenv').config();
const axios   = require('axios');
const winston = require('winston');

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const BITRIX_URL         = process.env.BITRIX_URL;
const DEFAULT_CATEGORY_ID = Number(process.env.TARGET_CATEGORY_ID || 0);
if (!BITRIX_URL) {
  console.error('‚ùå BITRIX_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
  process.exit(1);
}

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –õ–æ–≥–≥–µ—Ä
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [ new winston.transports.Console() ]
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', err => logger.error(`UNHANDLED: ${err.stack || err}`));
process.on('uncaughtException',  err => { logger.error(`UNCAUGHT: ${err.stack || err}`); process.exit(1); });

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Bitrix REST
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function btrx(method, params = {}, asQuery = true) {
  const url = `${BITRIX_URL}/${method}`;
  const cfg = asQuery ? { params } : {};
  const body = asQuery ? null : params;
  const { data } = await axios.post(url, body, cfg);
  if (data.error) throw new Error(`${method}: ${data.error_description || data.error}`);
  return data.result;
}

async function btrxPaged(method, params = {}, key = 'tasks') {
  let start = 0, all = [];
  while (true) {
    const chunk = await btrx(method, { ...params, start }, true);
    all = all.concat(key ? chunk[key] || [] : chunk);
    if (!chunk.next) break;
    start = chunk.next;
  }
  return all;
}

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function copyDeal(srcDealId, targetCategoryId) {
  logger.info(`‚ñ∂Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${srcDealId} ‚Üí –≤–æ—Ä–æ–Ω–∫–∞ ${targetCategoryId}`);

  // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É
  const deal = await btrx('crm.deal.get', { id: srcDealId });
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ ${srcDealId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏, –∫–æ–ø–∏—Ä—É—è –≤—Å–µ –∫—Ä–æ–º–µ ID, CATEGORY_ID, STAGE_ID, DATE_CREATE
  const { ID, CATEGORY_ID, STAGE_ID, DATE_CREATE, ...fields } = deal;
  fields.CATEGORY_ID = targetCategoryId;
  // –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å STAGE_ID = default –∏–ª–∏ –∏–∑ .env

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
  const res = await btrx('crm.deal.add', { fields }, false);
  const newDealId = typeof res === 'object' ? res.result || res.id || res : res;
  logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ ${newDealId}`);
  return newDealId;
}

//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async function copyTasks(srcDealId, dstDealId) {
  logger.info(`‚ñ∂Ô∏è –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ D_${srcDealId} ‚Üí D_${dstDealId}`);

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–≤—è–∑–∫–µ UF_CRM_TASK
  const tasks = await btrxPaged('tasks.task.list', {
    filter: {
      'UF_CRM_TASK': `D_${srcDealId}`,
    },
    select: ['ID','TITLE','RESPONSIBLE_ID','DESCRIPTION','DEADLINE','PRIORITY','START_DATE_PLAN','END_DATE_PLAN']
  });

  if (!tasks.length) {
    logger.warn('   ‚Ä¢ –ó–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ UF_CRM_TASK.');
    return 0;
  }
  logger.info(`üìå –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);

  let copied = 0;
  for (const t of tasks) {
    try {
      const r = await btrx('tasks.task.add', {
        fields: {
          TITLE: t.TITLE,
          RESPONSIBLE_ID: t.RESPONSIBLE_ID,
          DESCRIPTION: t.DESCRIPTION || '',
          DEADLINE: t.DEADLINE,
          PRIORITY: t.PRIORITY,
          START_DATE_PLAN: t.START_DATE_PLAN,
          END_DATE_PLAN: t.END_DATE_PLAN,
          UF_CRM_TASK: [`D_${dstDealId}`]
          STATUS: 2 // —Å—Ç–∞—Ç—É—Å "–û—Ç–∫—Ä—ã—Ç–∞"
        }
      }, false);
      const newId = typeof r === 'object' ? r.task?.id || r.id || r : r;
      logger.info(`   ‚Ä¢ –ó–∞–¥–∞—á–∞ ${newId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞`);
      copied++;
    } catch (e) {
      logger.error(`   ‚Ä¢ –û—à–∏–±–∫–∞ –∫–æ–ø–∏–∏ –∑–∞–¥–∞—á–∏ ${t.ID}: ${e.message}`);
    }
  }

  logger.info(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: ${copied}`);
  return copied;
}
async function copyActivities(srcDealId, dstDealId) {
  logger.info(`‚ñ∂Ô∏è –ö–æ–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏ ${srcDealId} ‚Üí ${dstDealId}`);
const activities = await btrxPaged('crm.activity.list', {
  filter: {
    'OWNER_TYPE_ID': 2, // 2 = —Å–¥–µ–ª–∫–∞
    'OWNER_ID': srcDealId
  }
});
for (const act of activities) {
  try {
    const copy = await btrx('crm.activity.add', {
      fields: {
        SUBJECT: act.SUBJECT,
        TYPE_ID: act.TYPE_ID,                 // –¢–∏–ø (–∑–≤–æ–Ω–æ–∫, –≤—Å—Ç—Ä–µ—á–∞, –∏ —Ç.–¥.)
        DIRECTION: act.DIRECTION,             // –í—Ö–æ–¥—è—â–∏–π / –∏—Å—Ö–æ–¥—è—â–∏–π
        START_TIME: act.START_TIME,
        END_TIME: act.END_TIME,
        RESPONSIBLE_ID: act.RESPONSIBLE_ID,
        DESCRIPTION: act.DESCRIPTION,
        COMMUNICATIONS: act.COMMUNICATIONS || [],
        OWNER_ID: dstDealId,
        OWNER_TYPE_ID: 2                     // –°–¥–µ–ª–∫–∞
      }
    }, false);

    logger.info(`   ‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–ª–æ: ${act.SUBJECT}`);
  } catch (err) {
    logger.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ª–∞ "${act.SUBJECT}": ${err.message}`);
  }
}
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ CLI
//‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
(async () => {
  const [srcId, cliCategory] = process.argv.slice(2);
  if (!srcId) {
    console.log('Usage: node bitrix_deal_task_copier.js <SOURCE_DEAL_ID> [TARGET_CATEGORY_ID]');
    process.exit(0);
  }
  const targetCat = Number(cliCategory) || DEFAULT_CATEGORY_ID;
  if (!targetCat) {
    console.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω TARGET_CATEGORY_ID –≤ .env –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö CLI');
    process.exit(1);
  }

  try {
    const newDeal = await copyDeal(srcId, targetCat);
    await copyTasks(srcId, newDeal);
  } catch (err) {
    logger.error(err.stack || err.message);
    process.exit(1);
  }
})();
