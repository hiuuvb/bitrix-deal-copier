async function copyTasks(srcDealId, dstDealId) {
  const tasks = await btrxPaged('tasks.task.list', {
    filter: { 'UF_CRM_TASK': `D_${srcDealId}` },
    select: [
      'ID','TITLE','RESPONSIBLE_ID','DESCRIPTION',
      'START_DATE_PLAN','END_DATE_PLAN','DEADLINE','PRIORITY','STATUS','CHANGED_DATE'
    ]
  }, 'tasks');

  // –û–ø—Ä–µ–¥–µ–ª–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É
  let lastOpenTask = null;
  for (const t of tasks) {
    if (!t.ID) {
      logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ ID: ${JSON.stringify(t)}`);
      continue;
    }
    if (t.STATUS != 5 && (!lastOpenTask || new Date(t.CHANGED_DATE) > new Date(lastOpenTask.CHANGED_DATE))) {
      lastOpenTask = t;
    }
  }

  for (const t of tasks) {
    if (!t.ID) {
      logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –±–µ–∑ ID: ${JSON.stringify(t)}`);
      continue;
    }

    const title = t.TITLE && t.TITLE.trim() ? t.TITLE : `–ó–∞–¥–∞—á–∞ #${t.ID}`;
    const responsible = t.RESPONSIBLE_ID > 0 ? t.RESPONSIBLE_ID : DEFAULT_RESPONSIBLE;

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–ø–∏—Ä—É–µ–º —Å —Ç–µ–º –∂–µ —Å—Ç–∞—Ç—É—Å–æ–º, –Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º!
    let status = t.STATUS;
    if (lastOpenTask && t.ID === lastOpenTask.ID) status = 2;

    const fields = {
      TITLE:           title,
      RESPONSIBLE_ID:  responsible,
      DESCRIPTION:     t.DESCRIPTION || '',
      START_DATE_PLAN: t.START_DATE_PLAN || undefined,
      END_DATE_PLAN:   t.END_DATE_PLAN || undefined,
      DEADLINE:        t.DEADLINE || undefined,
      PRIORITY:        t.PRIORITY || 1,
      UF_CRM_TASK:     [`D_${dstDealId}`],
      STATUS:          status
    };
    try {
      logger.info('‚û°Ô∏è –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É:', fields);
      const added = await btrx('tasks.task.add', { fields }, false);
      const newId = added.task?.id || added.id || added;
      logger.info(`üìå –ó–∞–¥–∞—á–∞ ${t.ID} ‚Üí ${newId} (${title})`);
      await copyChecklist(t.ID, newId);
      await copyComments(t.ID, newId);
    } catch (e) {
      logger.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ${t.ID}: ${e.message}`);
      logger.error(JSON.stringify(fields));
    }
  }
}
