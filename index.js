// Bitrix Deal Copier ‚Äì v3 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
// ---------------------------------------------
// ‚Ü™ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ¬´undefined¬ª –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏:
//    ‚Ä¢ –í–µ—Ä–Ω—É–ª–∏ query‚Äëstring –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–∑–æ–≤–∞ Bitrix REST (axios.post(url, null, { params }))
// ‚Ü™ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á (UF_CRM_TASK –∫–∞–∫ –º–∞—Å—Å–∏–≤, STATUS != 5)
// ‚Ü™ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ (dealId = num | obj.id)
// ‚Ü™ –û–ø—Ü–∏—è PARALLEL_TASKS = 3 –¥–ª—è –º—è–≥–∫–æ–≥–æ –ª–∏–º–∏—Ç–∞ RPS

require('dotenv').config();
const express  = require('express');
const axios    = require('axios');
const winston  = require('winston');

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ –ù–ê–°–¢–†–û–ô–ö–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
const BITRIX_URL  = process.env.BITRIX_URL;
const CATEGORY_ID = Number(process.env.CATEGORY_ID || 14);
const STAGE_ID    = process.env.STAGE_ID || '–†–î_–≤—ã–¥–∞–Ω';
const PORT        = process.env.PORT || 3000;
const PARALLEL_TASKS = Number(process.env.PARALLEL_TASKS || 3); // –æ–¥–Ω–æ–≤—Ä–µ–º. –∫–æ–ø–∏–π –∑–∞–¥–∞—á

if (!BITRIX_URL) {
  console.error('‚ùå BITRIX_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ –õ–û–ì–ì–ï–† ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [ new winston.transports.Console() ]
});

process.on('unhandledRejection', err => logger.error(`UNHANDLED: ${err.message}`));
process.on('uncaughtException', err => { logger.error(`UNCAUGHT: ${err.message}`); process.exit(1); });

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–Ø –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° BITRIX ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
async function btrx(method, params = {}) {
  try {
    const { data } = await axios.post(`${BITRIX_URL}/${method}`, null, { params });
    if (data.error) throw new Error(`${method}: ${data.error_description || data.error}`);
    return data.result;
  } catch (err) {
    logger.error(`${method}: ${err.message}`);
    throw err;
  }
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è (tasks.task.list –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç next)
async function btrxPaged(method, params = {}, key = 'tasks') {
  let start = 0, collected = [];
  while (true) {
    const chunk = await btrx(method, { ...params, start });
    collected = collected.concat(key ? chunk[key] || [] : chunk);
    if (!chunk.next) break;
    start = chunk.next;
  }
  return collected;
}

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ BUSINESS‚ÄëLOGIC ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
async function copyDeal(dealId) {
  logger.info(`‚ñ∂Ô∏è  –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ ${dealId}`);

  // 1Ô∏è‚É£ –ò—Å—Ö–æ–¥–Ω–∞—è —Å–¥–µ–ª–∫–∞
  const deal = await btrx('crm.deal.get', { id: dealId });
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ ${dealId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

  // 2Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É
  const newDealRes = await btrx('crm.deal.add', {
    fields: {
      TITLE: deal.TITLE,
      CATEGORY_ID,
      STAGE_ID,
      ASSIGNED_BY_ID: deal.ASSIGNED_BY_ID
    }
  });
  const newDealId = typeof newDealRes === 'object' ? newDealRes.id || newDealRes.ID : newDealRes;
  logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ ${newDealId}`);

  // 3Ô∏è‚É£ –í—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–∏
  const tasks = await btrxPaged('tasks.task.list', {
    filter: {
      'UF_CRM_TASK': [`D_${dealId}`],
      '!=STATUS': 5 // –∏—Å–∫–ª—é—á–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
    },
    select: ['ID','TITLE','RESPONSIBLE_ID','DESCRIPTION']
  });
  logger.info(`üìå –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${tasks.length}`);

  // 4Ô∏è‚É£ –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
  let copied = 0;
  for (let i = 0; i < tasks.length; i += PARALLEL_TASKS) {
    const slice = tasks.slice(i, i + PARALLEL_TASKS);
    const results = await Promise.allSettled(slice.map(t =>
      btrx('tasks.task.add', {
        fields: {
          TITLE: t.TITLE,
          RESPONSIBLE_ID: t.RESPONSIBLE_ID,
          DESCRIPTION: t.DESCRIPTION || '',
          UF_CRM_TASK: [`D_${newDealId}`]
        }
      })
      .then(r => {
        const id = typeof r === 'object' ? r.task?.id || r.id : r;
        logger.info(`   ‚Ä¢ –ó–∞–¥–∞—á–∞ ${id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞`);
        copied++;
      })
      .catch(e => logger.error(`   ‚Ä¢ –û—à–∏–±–∫–∞ –∫–æ–ø–∏–∏ –∑–∞–¥–∞—á–∏ ${t.ID}: ${e.message}`))
    ));
  }

  return { oldDeal: dealId, newDeal: newDealId, tasksCopied: copied };
}

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ EXPRESS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
const app = express();
app.use(express.json());

app.get('/healthcheck', (req,res) => res.json({ status: 'ok' }));

app.post('/', async (req, res) => {
  const { deal_id } = req.body;
  if (!deal_id) return res.status(400).send('–ü–∞—Ä–∞–º–µ—Ç—Ä deal_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');

  try {
    const ids = Array.isArray(deal_id) ? deal_id : [deal_id];
    const results = [];
    for (const id of ids) results.push(await copyDeal(id));
    res.json({ ok: true, results });
  } catch (err) {
    res.status(500).send(err.message);
  }
});

//--------------------------------------------------
// ‚îÄ‚îÄ‚îÄ –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//--------------------------------------------------
app.listen(PORT, () => logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
