// bitrix_deal_task_copier.js ‚Äî –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –∏ –∑–∞–¥–∞—á
// –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–¥–µ–ª–∫—É + –≤—Å–µ –∑–∞–¥–∞—á–∏ (–æ—Ç–∫—Ä—ã—Ç—ã–µ –∏ –∑–∞–∫—Ä—ã—Ç—ã–µ) + —á–µ–∫-–ª–∏—Å—Ç—ã + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ + –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É (–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)

require('dotenv').config();
const axios = require('axios');
const winston = require('winston');

const BITRIX_URL            = process.env.BITRIX_URL;
const DEFAULT_CATEGORY_ID   = Number(process.env.TARGET_CATEGORY_ID || 14);

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }),
    winston.format.printf(({ timestamp, level, message }) => `${timestamp} [${level.toUpperCase()}] ${message}`)
  ),
  transports: [ new winston.transports.Console() ]
});

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–æ–≤ REST API
async function btrx(method, params = {}, asQuery = true) {
  const url = `${BITRIX_URL}/${method}`;
  const cfg = asQuery ? { params } : {};
  const body = asQuery ? null : params;
  const { data } = await axios.post(url, body, cfg);
  if (data.error) {
    throw new Error(`${method}: ${data.error_description || data.error}`);
  }
  return data.result;
}

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
async function btrxPaged(method, params = {}, key = 'tasks') {
  let start = 0, all = [];
  while (true) {
    const chunk = await btrx(method, { ...params, start }, true);
    all = all.concat(key ? chunk[key] || [] : chunk);
    if (!chunk.next) break;
    start = chunk.next;
  }
  return all;
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ —Ü–µ–ª–µ–≤—É—é –≤–æ—Ä–æ–Ω–∫—É (category)
async function copyDeal(srcDealId, targetCategoryId) {
  const deal = await btrx('crm.deal.get', { id: srcDealId });
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ ${srcDealId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

  // –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –∏–∑ –∫–æ–ø–∏–∏
  const {
    ID,
    CATEGORY_ID,
    STAGE_ID,
    DATE_CREATE,
    UF_CRM_PAYMENT_DEADLINE,
    UF_CRM_SOURCE,
    ...fields
  } = deal;

  fields.CATEGORY_ID = targetCategoryId;
  const res = await btrx('crm.deal.add', { fields }, false);
  return typeof res === 'object' ? (res.result || res.id || res) : res;
}

// –ö–∞—Ä—Ç–∞ —Å—Ç–∞—Ä—ã—Ö ‚Üí –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
const taskMap = new Map();

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –ø–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π
async function copyTasks(srcDealId, dstDealId) {
  const tasks = await btrxPaged('tasks.task.list', {
    filter: { 'UF_CRM_TASK': `D_${srcDealId}` },
    select: [
      'ID','TITLE','UF_CRM_TASK','RESPONSIBLE_ID','DESCRIPTION',
      'DEADLINE','PRIORITY','START_DATE_PLAN','END_DATE_PLAN',
      'STATUS','CHANGED_DATE'
    ]
  }, 'tasks');

  for (const t of tasks) {
    // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ERR_BAD_REQUEST
    if (!t.TITLE || !t.TITLE.trim()) {
      logger.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É ${t.ID}: –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞`);
      continue;
    }

    const taskData = {
      TITLE:           t.TITLE,
      RESPONSIBLE_ID:  t.RESPONSIBLE_ID,
      DESCRIPTION:     t.DESCRIPTION || '',
      DEADLINE:        t.DEADLINE,
      PRIORITY:        t.PRIORITY,
      START_DATE_PLAN: t.START_DATE_PLAN,
      END_DATE_PLAN:   t.END_DATE_PLAN,
      UF_CRM_TASK:     [`D_${dstDealId}`],
      STATUS:          t.STATUS
    };
    const added = await btrx('tasks.task.add', { fields: taskData }, false);
    const newTaskId = added.task?.id || added.id || added;
    taskMap.set(t.ID, { newId: newTaskId, status: t.STATUS, changed: t.CHANGED_DATE });
    logger.info(`üìå –ó–∞–¥–∞—á–∞ ${t.ID} ‚Üí ${newTaskId} (—Å—Ç–∞—Ç—É—Å ${t.STATUS})`);

    await copyChecklist(t.ID, newTaskId);
    await copyComments(t.ID, newTaskId);
  }

  const openEntries = Array.from(taskMap.entries()).filter(([,info]) => info.status !== 5);
  if (openEntries.length) {
    openEntries.sort((a, b) => new Date(b[1].changed) - new Date(a[1].changed));
    const [, lastInfo] = openEntries[0];
    if (lastInfo.status === 5) {
      await btrx('tasks.task.update', {
        taskId: lastInfo.newId,
        fields: { STATUS: 2 }
      });
      logger.info(`‚ôªÔ∏è –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∞ –∑–∞–¥–∞—á–∞ ${lastInfo.newId}`);
    }
  } else {
    const acts = await btrxPaged('crm.activity.list', {
      filter: { OWNER_TYPE_ID:2, OWNER_ID: srcDealId },
      order: { DEADLINE: 'DESC' }
    }, 'activities');

    if (acts.length) {
      const a = acts[0];
      const taskData = {
        TITLE:            `Follow-up: ${a.SUBJECT}`,
        RESPONSIBLE_ID:   a.RESPONSIBLE_ID,
        START_DATE_PLAN:  a.START_TIME,
        DEADLINE:         a.END_TIME,
        UF_CRM_TASK:      [`D_${dstDealId}`],
        STATUS:           2
      };
      const add = await btrx('tasks.task.add', { fields: taskData }, false);
      const id = add.task?.id || add.id || add;
      logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${id}`);
    }
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async function copyChecklist(oldTaskId, newTaskId) {
  const items = await btrx('task.checklistitem.getList', { taskId: oldTaskId });
  for (const item of items) {
    await btrx('task.checklistitem.add', {
      taskId: newTaskId,
      fields: { TITLE: item.TITLE, IS_COMPLETE: item.IS_COMPLETE }
    }, false);
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏
async function copyComments(oldTaskId, newTaskId) {
  const comments = await btrx('task.commentitem.getList', { taskId: oldTaskId });
  for (const c of comments) {
    if (c.POST_MESSAGE?.trim()) {
      await btrx('task.commentitem.add', {
        taskId: newTaskId,
        fields: { POST_MESSAGE: c.POST_MESSAGE }
      }, false);
    }
  }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–¥–µ–ª–∫–∏
async function copyActivities(srcDealId, dstDealId) {
  logger.info(`‚ñ∂Ô∏è –ö–æ–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏ ${srcDealId} ‚Üí ${dstDealId}`);
  const activities = await btrxPaged('crm.activity.list', {
    filter: { OWNER_TYPE_ID:2, OWNER_ID: srcDealId }
  }, 'activities');

  for (const act of activities) {
    try {
      await btrx('crm.activity.add', {
        fields: {
          SUBJECT:        act.SUBJECT,
          TYPE_ID:        act.TYPE_ID,
          DIRECTION:      act.DIRECTION,
          START_TIME:     act.START_TIME,
          END_TIME:       act.END_TIME,
          RESPONSIBLE_ID: act.RESPONSIBLE_ID,
          DESCRIPTION:    act.DESCRIPTION,
          COMMUNICATIONS: act.COMMUNICATIONS || [],
          OWNER_ID:       dstDealId,
          OWNER_TYPE_ID:  2
        }
      }, false);
      logger.info(`   ‚Ä¢ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–ª–æ: ${act.SUBJECT}`);
    } catch (err) {
      logger.warn(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ–ª–∞ "${act.SUBJECT}": ${err.message}`);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
(async () => {
  logger.info(`üîç –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–¥–µ–ª–∫—É –∏–∑ –≤–æ—Ä–æ–Ω–∫–∏ 70...`);
  const deals = await btrx('crm.deal.list', {
    order:  { ID: 'DESC' },
    filter: { CATEGORY_ID: 70 },
    select: ['ID','TITLE'],
    limit:  1
  });

  const srcId = deals[0]?.ID;
  if (!srcId) {
    logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É –≤ –≤–æ—Ä–æ–Ω–∫–µ 70');
    process.exit(1);
  }
  logger.info(`üìé –ù–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ ${srcId}`);

  // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–¥–µ–ª–∫–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≤–æ—Ä–æ–Ω–∫–µ
  const exists = await btrx('crm.deal.list', {
    filter: { CATEGORY_ID: DEFAULT_CATEGORY_ID, TITLE: deals[0].TITLE },
    select: ['ID'],
    limit: 1
  });

  if (exists.length) {
    const existingDealId = exists[0].ID;
    logger.warn(`‚ö†Ô∏è –°–¥–µ–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –≤–æ—Ä–æ–Ω–∫–µ ${DEFAULT_CATEGORY_ID} (ID ${existingDealId}), –∫–æ–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...`);
    await copyTasks(srcId, existingDealId);
    await copyActivities(srcId, existingDealId);
    logger.info(`üéâ –ó–∞–¥–∞—á–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–¥–µ–ª–∫—É ${existingDealId}`);
    return;
  }

  try {
    const newDealId = await copyDeal(srcId, DEFAULT_CATEGORY_ID);
    logger.info(`‚úÖ –°–¥–µ–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: ${newDealId}`);
    await copyTasks(srcId, newDealId);
    await copyActivities(srcId, newDealId);
    logger.info(`üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã`);
  } catch (err) {
    logger.error(err.stack || err.message);
    process.exit(1);
  }
})();
