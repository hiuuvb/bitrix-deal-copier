const axios = require('axios');
const BITRIX_URL = process.env.BITRIX_URL;
const DEFAULT_RESPONSIBLE_ID = Number(process.env.DEFAULT_RESPONSIBLE_ID || 1);

// üìå 1. –ö–æ–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
async function copyDeal(dealId, targetCategoryId) {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ
  const { data: original } = await axios.post(`${BITRIX_URL}/crm.deal.get.json`, {
    id: dealId
  });

  const deal = original.result;
  if (!deal) throw new Error(`–°–¥–µ–ª–∫–∞ —Å id ${dealId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);

  // –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
  const newDeal = {
    TITLE: `${deal.TITLE} (–∫–æ–ø–∏—è)`,
    TYPE_ID: deal.TYPE_ID,
    STAGE_ID: `C${targetCategoryId}:NEW`,
    CATEGORY_ID: targetCategoryId,
    ASSIGNED_BY_ID: deal.ASSIGNED_BY_ID || DEFAULT_RESPONSIBLE_ID,
    CONTACT_ID: deal.CONTACT_ID || null,
    COMPANY_ID: deal.COMPANY_ID || null,
    BEGINDATE: deal.BEGINDATE,
    CLOSEDATE: deal.CLOSEDATE,
    CURRENCY_ID: deal.CURRENCY_ID,
    OPPORTUNITY: deal.OPPORTUNITY,
    COMMENTS: deal.COMMENTS
  };

  const { data: created } = await axios.post(`${BITRIX_URL}/crm.deal.add.json`, {
    fields: newDeal
  });

  if (!created.result) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É');
  return created.result;
}

// üìå 2. –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
async function copyTasks(oldDealId, newDealId) {
  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Å–¥–µ–ª–∫–µ
  const { data: response } = await axios.post(`${BITRIX_URL}/tasks.task.list`, {
    filter: {
      'UF_CRM_TASK': `D_${oldDealId}`
    }
  });

  const tasks = response.result.tasks || [];

  if (!tasks.length) return;

  // –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é
  const sorted = tasks
    .filter(t => t.status === 5) // –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ
    .sort((a, b) => new Date(b.updatedDate) - new Date(a.updatedDate));

  for (let task of tasks) {
    const isLastClosed = task.id === sorted[0]?.id;
    const newTaskFields = {
      TITLE: task.title,
      DESCRIPTION: task.description,
      RESPONSIBLE_ID: task.responsibleId || DEFAULT_RESPONSIBLE_ID,
      CREATED_BY: task.createdBy,
      UF_CRM_TASK: [`D_${newDealId}`]
    };

    if (isLastClosed) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ
      newTaskFields.STATUS = 2;
    }

    await axios.post(`${BITRIX_URL}/tasks.task.add`, {
      fields: newTaskFields
    });
  }
}

// üìå 3. –ö–æ–ø–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–≤–æ–Ω–∫–∏, –≤—Å—Ç—Ä–µ—á–∏ –∏ —Ç.–ø.)
async function copyActivities(oldDealId, newDealId) {
  const { data: res } = await axios.post(`${BITRIX_URL}/crm.activity.list`, {
    filter: { 'OWNER_TYPE_ID': 2, 'OWNER_ID': oldDealId } // 2 = —Å–¥–µ–ª–∫–∞
  });

  const activities = res.result || [];

  for (let act of activities) {
    const newAct = {
      TYPE_ID: act.TYPE_ID,
      SUBJECT: act.SUBJECT,
      DESCRIPTION: act.DESCRIPTION,
      COMPLETED: 'N',
      RESPONSIBLE_ID: act.RESPONSIBLE_ID || DEFAULT_RESPONSIBLE_ID,
      OWNER_ID: newDealId,
      OWNER_TYPE_ID: 2 // —Å–¥–µ–ª–∫–∞
    };

    await axios.post(`${BITRIX_URL}/crm.activity.add`, {
      fields: newAct
    });
  }
}

// üì¶ –≠–∫—Å–ø–æ—Ä—Ç
module.exports = {
  copyDeal,
  copyTasks,
  copyActivities
};
